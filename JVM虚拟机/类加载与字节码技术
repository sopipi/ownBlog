类加载与字节码技术
1. 类文件结构
2. 字节码指令
3. 编译期处理
4. 类加载阶段
5. 类加载器
6. 运行期优化
   
   
1. 类文件结构
    一个简单的 HelloWorld.java
    ~~~~
    package cn.itcast.jvm.t5;
    // HelloWorld 示例 public class HelloWorld {
       public static void main(String[] args) {
    System.out.println("hello world");
     } }
    ~~~~
    执行 javac -parameters -d . HellowWorld.java
    编译为 HelloWorld.class 后是这个样子的：
    注意在二进制文件是16进制的
    ~~~~
    [root@localhost ~]# od -t xC HelloWorld.class
    0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09
    0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07
    0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29
    0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e
    0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63
    0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01
    0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63
    0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f
    0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16
    0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72
    0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13
    0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69
    0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61
    0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46
    0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64
    0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e
    0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64
    0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74
    0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c
    0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61
    0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61
    0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f
    0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72
    0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76
    0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d
    0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a
    0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b
    0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01
    0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01
    0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00
    0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00
    0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00
    0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00
    0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a
    0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b
    0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00
    0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00
    ~~~~

    根据 JVM 规范，类文件结构如下
    ~~~~
    ClassFile {
    u4             magic;   魔数
    u2             minor_version; 版本  
    u2             major_version;  
    u2             constant_pool_count;   常量池
    cp_info        constant_pool[constant_pool_count-1];  
    u2             access_flags;  访问修饰
    u2             this_class;    类自身包名类名信息
    u2             super_class;   父类信息
    u2             interfaces_count;  接口信息
    u2             interfaces[interfaces_count];  
    u2             fields_count;  类中变量信息
    field_info     fields[fields_count];  
    u2             methods_count;   类中方法信息
    method_info    methods[methods_count];  
    u2             attributes_count;  附加的属性信息
    attribute_info attributes[attributes_count];
    }
    ~~~~

    1.1 魔数 (标识文件的特定类型)
      0~3 字节，表示它是否是【class】类型的文件
      0000000 [ca fe ba be] 00 00 00 34 00 23 0a 00 06 00 15 09
    1.2 版本
      4~7 字节，表示类的版本 00 34（10进制52） 表示是 Java 8,主版本
      0000000 ca fe ba be [00 00 00 34] 00 23 0a 00 06 00 15 09
    1.3 常量池
      常量池表
      ~~~~
      Constant Type                   Value
      CONSTANT_Class                    7
      CONSTANT_Fieldref                 9
      CONSTANT_Methodref                10
      CONSTANT_InterfaceMethodref       11
      CONSTANT_String                   8
      CONSTANT_Integer                  3
      CONSTANT_Float                    4
      CONSTANT_Long                     5
      CONSTANT_Double                   6
      CONSTANT_NameAndType              12
      CONSTANT_Utf8                     1
      CONSTANT_MethodHandle             15
      CONSTANT_MethodType               16
      CONSTANT_InvokeDynamic            18
      ~~~~

      8~9 字节，表示常量池长度，00 23 （35项） 表示常量池有 #1~#34项，注意 #0 项不计入，也没有值
      0000000 ca fe ba be 00 00 00 34 [00 23] 0a 00 06 00 15 09

      第#1项 0a 表示一个 Method 信息，00 06 和 00 15（21） 表示它引用了常量池中 #6 和 #21 项来获得 这个方法的【所属类】和【方法名】
      0000000 ca fe ba be 00 00 00 34 00 23 [0a 00 06 00 15] 09

      第#2项 09 表示一个 Field 信息，00 16（22）和 00 17（23） 表示它引用了常量池中 #22 和 # 23 项 来获得这个成员变量的【所属类】和【成员变量名】
      0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 [09
      0000020 00 16 00 17] 08 00 18 0a 00 19 00 1a 07 00 1b 07  

      第#3项 08 表示一个字符串常量名称，00 18（24）表示它引用了常量池中 #24 项
      0000020 00 16 00 17 [08 00 18 0a 00] 19 00 1a 07 00 1b 07

      第#4项 0a 表示一个 Method 信息，00 19（25） 和 00 1a（26） 表示它引用了常量池中 #25 和 #26 项来获得这个方法的【所属类】和【方法名】
      0000020 00 16 00 17 08 00 18 [0a 00 19 00 1a] 07 00 1b 07

      第#5项 07 表示一个 Class 信息，00 1b（27） 表示它引用了常量池中 #27 项
      0000020 00 16 00 17 08 00 18 0a 00 19 00 1a [07 00 1b] 07

      第#6项 07 表示一个 Class 信息，00 1c（28） 表示它引用了常量池中 #28 项
      0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b [07
      0000040 00 1c] 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29

      第#7项 01 表示一个 utf8 串，00 06 表示长度，3c 69 6e 69 74 3e 是【 <init> 】 表示构造函数
      0000040 00 1c [01 00 06 3c 69 6e 69 74 3e] 01 00 03 28 29  

      第#8项 01 表示一个 utf8 串，00 03 表示长度，28 29 56 是【()V】其实就是表示无参、无返回值
      0000040 00 1c 01 00 06 3c 69 6e 69 74 3e [01 00 03 28 29
      0000060 56] 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e

      第#9项 01 表示一个 utf8 串，00 04 表示长度，43 6f 64 65 是【Code】
      0000060 56 [01 00 04 43 6f 64 65] 01 00 0f 4c 69 6e 65 4e

      第#10项 01 表示一个 utf8 串，00 0f（15） 表示长度，4c 69 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65 是【LineNumberTable】
      0000060 56 01 00 04 43 6f 64 65 [01 00 0f 4c 69 6e 65 4e
      0000100 75 6d 62 65 72 54 61 62 6c 65] 01 00 12 4c 6f 63

      第#11项 01 表示一个 utf8 串，00 12（18） 表示长度，4c 6f 63 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65是【LocalVariableTable】
      0000100 75 6d 62 65 72 54 61 62 6c 65 [01 00 12 4c 6f 63
      0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65] 01

      第#12项 01 表示一个 utf8 串，00 04 表示长度，74 68 69 73 是【this】
      0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 [01
      0000140 00 04 74 68 69 73] 01 00 1d 4c 63 6e 2f 69 74 63

      第#13项 01 表示一个 utf8 串，00 1d（29） 表示长度，是【Lcn/itcast/jvm/t5/HelloWorld;】
      0000140 00 04 74 68 69 73 [01 00 1d 4c 63 6e 2f 69 74 63
      0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f
      0000200 57 6f 72 6c 64 3b] 01 00 04 6d 61 69 6e 01 00 16

      第#14项 01 表示一个 utf8 串，00 04 表示长度，74 68 69 73 是【main】
      0000200 57 6f 72 6c 64 3b [01 00 04 6d 61 69 6e] 01 00 16

      第#15项 01 表示一个 utf8 串，00 16（22） 表示长度，是【([Ljava/lang/String;)V】其实就是参数为 字符串数组，无返回值
      0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e [01 00 16
      0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72
      0000240 69 6e 67 3b 29 56] 01 00 04 61 72 67 73 01 00 13

      第#16项 01 表示一个 utf8 串，00 04 表示长度，是【args】
      0000240 69 6e 67 3b 29 56 [01 00 04 61 72 67 73] 01 00 13

      第#17项 01 表示一个 utf8 串，00 13（19） 表示长度，是【[Ljava/lang/String;】
      0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 [01 00 13
      0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69
      0000300 6e 67 3b] 01 00 10 4d 65 74 68 6f 64 50 61 72 61

      第#18项 01 表示一个 utf8 串，00 10（16） 表示长度，是【MethodParameters】
      0000300 6e 67 3b [01 00 10 4d 65 74 68 6f 64 50 61 72 61
      0000320 6d 65 74 65 72 73] 01 00 0a 53 6f 75 72 63 65 46

      第#19项 01 表示一个 utf8 串，00 0a（10） 表示长度，是【SourceFile】
      0000320 6d 65 74 65 72 73 [01 00 0a 53 6f 75 72 63 65 46
      0000340 69 6c 65] 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64  

      第#20项 01 表示一个 utf8 串，00 0f（15） 表示长度，是【HelloWorld.java】
      0000340 69 6c 65 [01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64
      0000360 2e 6a 61 76 61] 0c 00 07 00 08 07 00 1d 0c 00 1e

      第#21项 0c 表示一个 【名+类型】，00 07 00 08 引用了常量池中 #7 #8 两项
      0000360 2e 6a 61 76 61 [0c 00 07 00 08] 07 00 1d 0c 00 1e

      第#22项 07 表示一个 Class 信息，00 1d（29） 引用了常量池中 #29 项
      0000360 2e 6a 61 76 61 0c 00 [07 00 08 07 00 1d] 0c 00 1e

      第#23项 0c 表示一个 【名+类型】，00 1e（30） 00 1f （31）引用了常量池中 #30 #31 两项
      0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d [0c 00 1e
      0000400 00 1f] 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64

      第#24项 01 表示一个 utf8 串，00 0f（15） 表示长度，是【hello world】
      0000400 00 1f [01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64]

      第#25项 07 表示一个 Class 信息，00 20（32） 引用了常量池中 #32 项
      0000420 [07 00 20] 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74  

      第#26项 0c 表示一个 【名+类型】，00 21（33） 00 22（34）引用了常量池中 #33 #34 两项
      0000420 07 00 20 [0c 00 21 00 22] 01 00 1b 63 6e 2f 69 74  

      第#27项 01 表示一个 utf8 串，00 1b（27） 表示长度，是【cn/itcast/jvm/t5/HelloWorld】
      0000420 07 00 20 0c 00 21 00 22 [01 00 1b 63 6e 2f 69 74
      0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c
      0000460 6f 57 6f 72 6c 64] 01 00 10 6a 61 76 61 2f 6c 61  

      第#28项 01 表示一个 utf8 串，00 10（16） 表示长度，是【java/lang/Object】
      0000460 6f 57 6f 72 6c 64 [01 00 10 6a 61 76 61 2f 6c 61
      0000500 6e 67 2f 4f 62 6a 65 63 74] 01 00 10 6a 61 76 61

      第#29项 01 表示一个 utf8 串，00 10（16） 表示长度，是【java/lang/System】
      0000500 6e 67 2f 4f 62 6a 65 63 74 [01 00 10 6a 61 76 61
      0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d] 01 00 03 6f

      第#30项 01 表示一个 utf8 串，00 03 表示长度，是【out】
      0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d [01 00 03 6f
      0000540 75 74] 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72

      第#31项 01 表示一个 utf8 串，00 15（21） 表示长度，是【Ljava/io/PrintStream;】
      0000540 75 74 [01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72
      0000560 69 6e 74 53 74 72 65 61 6d 3b] 01 00 13 6a 61 76

      第#32项 01 表示一个 utf8 串，00 13（19） 表示长度，是【java/io/PrintStream】
      0000560 69 6e 74 53 74 72 65 61 6d 3b [01 00 13 6a 61 76
      0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d]

      第#33项 01 表示一个 utf8 串，00 07 表示长度，是【println】
      0000620 [01 00 07 70 72 69 6e 74 6c 6e] 01 00 15 28 4c 6a

      第#34项 01 表示一个 utf8 串，00 15（21） 表示长度，是【(Ljava/lang/String;)V】
      0000620 01 00 07 70 72 69 6e 74 6c 6e [01 00 15 28 4c 6a
      0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b
      0000660 29 56] 00 21 00 05 00 06 00 00 00 00 00 02 00 01

    1.4 访问标识与继承信息
      21 表示该 class 是一个类，公共的
      0000660 29 56 [00 21] 00 05 00 06 00 00 00 00 00 02 00 01
      05 表示根据常量池中 #5 找到本类全限定名
      0000660 29 56 00 21 [00 05] 00 06 00 00 00 00 00 02 00 01
      06 表示根据常量池中 #6 找到父类全限定名
      0000660 29 56 00 21 00 05 [00 06] 00 00 00 00 00 02 00 01
      表示接口的数量，本类为 0
      0000660 29 56 00 21 00 05 00 06 [00 00] 00 00 00 02 00 01
      ~~~~
      Flag Name                  Value        Interpretation
      ACC_PUBLIC                 0x0001       Declared public ; may be accessed from outside its package.
      ACC_FINAL                  0x0010       Declared final ; no subclasses allowed.
      ACC_SUPER                  0x0020       Treat superclass methods specially when invoked by the invokespecial instruction.
      ACC_INTERFACE              0x0200       Is an interface, not a class.
      ACC_ABSTRACT               0x0400       Declared abstract ; must not be instantiated.
      ACC_SYNTHETIC              0x1000       Declared synthetic; not present in the source code.
      ACC_ANNOTATION             0x2000       Declared as an annotation type.
      ACC_ENUM                   0x4000       Declared as an enum type.
      ~~~~

    1.5 Field 信息
      表示成员变量数量，本类为 0
      0000660 29 56 00 21 00 05 00 06 00 00 [00 00] 00 02 00 01
      FieldType        Type              Interpretation
      B                byte              signed byte
      C                char              Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16
      D                double            double-precision ﬂoating-point value
      F                float             single-precision ﬂoating-point value
      I                int               integer
      J                long              long integer
      L ClassName ;    reference         an instance of class ClassName
      S                short             signed short
      Z                boolean           true or false
      [                reference         one array dimension

    1.6 Method 信息
      表示方法数量，本类为 2
      0000660 29 56 00 21 00 05 00 06 00 00 00 00 [00 02] 00 01
      一个方法由 访问修饰符，名称，参数描述，方法属性数量，方法属性组成
        00 09 表示引用了常量池 #09 项，发现是【Code】属性
        00 00 00 2f 表示此属性的长度是 47
        00 01 表示【操作数栈】大深度 00 01 表示【局部变量表】大槽（slot）数
        00 00 00 05 表示字节码长度，本例是 5
        2a b7 00 01 b1 是字节码指令
        00 00 00 02 表示方法细节属性数量，本例是 2
        00 0a 表示引用了常量池 #10 项，发现是【LineNumberTable】属性
          00 00 00 06 表示此属性的总长度，本例是 6
          00 01 表示【LineNumberTable】长度
          00 00 表示【字节码】行号
          00 04 表示【java 源码】行号
        00 0b 表示引用了常量池 #11 项，发现是【LocalVariableTable】属性
          00 00 00 0c 表示此属性的总长度，本例是 12
          00 01 表示【LocalVariableTable】长度
          00 00 表示局部变量生命周期开始，相对于字节码的偏移量
          00 05 表示局部变量覆盖的范围长度
          00 0c 表示局部变量名称，本例引用了常量池 #12 项，是【this】
          00 0d 表示局部变量的类型，本例引用了常量池 #13 项，是 【Lcn/itcast/jvm/t5/HelloWorld;】
          00 00 表示局部变量占有的槽位（slot）编号，本例是 0
        ~~~~
        0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 [00 01
        0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01
        0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00
        0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00
        0000760 01 00 00 00 05 00 0c 00 0d 00 00] 00 09 00 0e 00
        ~~~~
    1.7 附加属性
      00 01 表示附加属性数量
      00 13 表示引用了常量池 #19 项，即【SourceFile】
      00 00 00 02 表示此属性的长度
      00 14 表示引用了常量池 #20 项，即【HelloWorld.java】
      0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00
      0001120 00 00 02 00 14

      参考文献 https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html

2、字节码指令
    2.1 入门(0x2a)
      接着上一节，研究一下两组字节码指令，一个是
        2a b7 00 01 b1
      public cn.itcast.jvm.t5.HelloWorld(); 构造方法的字节码指令
        1. 2a => aload_0 加载 slot 0 的局部变量，即 this，做为下面的 invokespecial 构造方法调用的参数
        2. b7 => invokespecial 预备调用构造方法，哪个方法呢？
        3. 00 01 引用常量池中 #1 项，即【 Method java/lang/Object."<init>":()V 】
        4. b1 表示返回
      另一个是 public static void main(java.lang.String[]); 主方法的字节码指令
        1. b2 => getstatic 用来加载静态变量，哪个静态变量呢？
        2. 00 02 引用常量池中 #2 项，即【Field java/lang/System.out:Ljava/io/PrintStream;】
        3. 12 => ldc 加载参数，哪个参数呢？
        4. 03 引用常量池中 #3 项，即 【String hello world】
        5. b6 => invokevirtual 预备调用成员方法，哪个方法呢？
        6. 00 04 引用常量池中 #4 项，即【Method java/io/PrintStream.println:(Ljava/lang/String;)V】
        7. b1 表示返回
      请参考 https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5
    2.2 javap 工具
       自己分析类文件结构太麻烦了，Oracle 提供了 javap 工具来反编译 class 文件   javap -v HelloWorld.class
    2.3方法执行流程
      1）原始 java 代码
      2）编译后的字节码文件
      3）常量池载入运行时常量池（常量超过short放入常量池）
      4）方法字节码载入方法区
      5）main 线程开始运行，分配栈帧内存
      6）执行引擎（main方法）开始执行字节码（用字节码指令）（部分）在栈帧中进行分为局部变量表和操作数栈
        bipush 10
          将一个 byte 压入操作数栈（其长度会补齐 4 个字节），类似的指令还有
          sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）
          ldc 将一个 int 压入操作数栈
          ldc2_w 将一个 long 压入操作数栈（分两次压入，因为 long 是 8 个字节）
          这里小的数字都是和字节码指令存在一起，超过 short 范围的数字存入了常量池
        istore_1
          将操作数栈顶数据弹出，存入局部变量表的 slot 1
        ldc #3
          从常量池加载 #3 数据到操作数栈
          注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的
        invokevirtual #5
          找到常量池 #5 项 定位到方法区 java/io/PrintStream.println:(I)V 方法
          生成新的栈帧（分配 locals、stack等）
          传递参数，执行新栈帧中的字节码
          执行完毕，弹出栈帧
          清除 main 操作数栈内容
        return
          完成 main 方法调用，弹出 main 栈帧
          程序结束
    2.4 练习 - 分析 i++
       注意 iinc 指令是直接在局部变量 slot 上进行运算
       a++(先iload) 和 ++a(iinc) 的区别是先执行 iload 还是 先执行 iinc
    2.5 条件判断指令
       0x99 ifeq 判断是否 == 0
       0x9a ifne 判断是否 != 0
       0x9b iﬂt 判断是否 < 0
       0x9c ifge 判断是否 >= 0
       0x9d ifgt 判断是否 > 0
       0x9e iﬂe 判断是否 <= 0
       0x9f if_icmpeq 两个int是否 ==
       0xa0 if_icmpne 两个int是否 !=
       0xa1 if_icmplt 两个int是否 <
       0xa2 if_icmpge 两个int是否 >=
       0xa3 if_icmpgt 两个int是否 >
       0xa4 if_icmple 两个int是否 <=
       0xa5 if_acmpeq 两个引用是否 ==
       0xa6 if_acmpne 两个引用是否 !=
       0xc6 ifnull 判断是否 == null
       0xc7 ifnonnull 判断是否 != null
       几点说明：
        byte，short，char 都会按 int 比较，因为操作数栈都是 4 字节
        goto 用来进行跳转到指定行号的字节码
    2.6 循环控制指令
      其实循环控制还是前面介绍的那些指令
      注意 比较 while 和 for 的字节码，你发现它们是一模一样的，殊途也能同归
    2.7 练习 - 判断结果
    ~~~~
    public class Demo3_6_1 {
       public static void main(String[] args) {  
          int i = 0;      
          int x = 0;      
          while (i < 10) {    
               x = x++;    
               i++;      
          }      
          System.out.println(x); // 结果是 0  
          } }
    ~~~~
    2.8 构造方法
      1) <cinit>()V
        编译器会按从上至下的顺序，收集所有 static 静态代码块和静态成员赋值的代码，合并为一个特殊的方法 <cinit>()V ：
        <cinit>()V 方法会在类加载的初始化阶段被调用
      2）<init>()V
        编译器会按从上至下的顺序，收集所有 {} 代码块和成员变量赋值的代码，形成新的构造方法，但原始构造方法内的代码总是在后
--------------------------------23-----------------------
