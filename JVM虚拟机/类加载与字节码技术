类加载与字节码技术
1. 类文件结构
2. 字节码指令
3. 编译期处理
4. 类加载阶段
5. 类加载器
6. 运行期优化
   
   
1. 类文件结构
    一个简单的 HelloWorld.java
    ~~~~
    package cn.itcast.jvm.t5;
    // HelloWorld 示例 public class HelloWorld {
       public static void main(String[] args) {
    System.out.println("hello world");
     } }
    ~~~~
    执行 javac -parameters -d . HellowWorld.java
    编译为 HelloWorld.class 后是这个样子的：
    注意在二进制文件是16进制的
    ~~~~
    [root@localhost ~]# od -t xC HelloWorld.class
    0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09
    0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07
    0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29
    0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e
    0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63
    0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01
    0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63
    0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f
    0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16
    0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72
    0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13
    0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69
    0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61
    0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46
    0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64
    0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e
    0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64
    0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74
    0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c
    0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61
    0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61
    0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f
    0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72
    0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76
    0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d
    0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a
    0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b
    0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01
    0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01
    0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00
    0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00
    0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00
    0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00
    0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a
    0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b
    0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00
    0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00
    ~~~~

    根据 JVM 规范，类文件结构如下
    ~~~~
    ClassFile {
    u4             magic;   魔数
    u2             minor_version; 版本  
    u2             major_version;  
    u2             constant_pool_count;   常量池
    cp_info        constant_pool[constant_pool_count-1];  
    u2             access_flags;  访问修饰
    u2             this_class;    类自身包名类名信息
    u2             super_class;   父类信息
    u2             interfaces_count;  接口信息
    u2             interfaces[interfaces_count];  
    u2             fields_count;  类中变量信息
    field_info     fields[fields_count];  
    u2             methods_count;   类中方法信息
    method_info    methods[methods_count];  
    u2             attributes_count;  附加的属性信息
    attribute_info attributes[attributes_count];
    }
    ~~~~

    1.1 魔数 (标识文件的特定类型)
      0~3 字节，表示它是否是【class】类型的文件
      0000000 [ca fe ba be] 00 00 00 34 00 23 0a 00 06 00 15 09
    1.2 版本
      4~7 字节，表示类的版本 00 34（10进制52） 表示是 Java 8,主版本
      0000000 ca fe ba be [00 00 00 34] 00 23 0a 00 06 00 15 09
    1.3 常量池
      常量池表
      ~~~~
      Constant Type                   Value
      CONSTANT_Class                    7
      CONSTANT_Fieldref                 9
      CONSTANT_Methodref                10
      CONSTANT_InterfaceMethodref       11
      CONSTANT_String                   8
      CONSTANT_Integer                  3
      CONSTANT_Float                    4
      CONSTANT_Long                     5
      CONSTANT_Double                   6
      CONSTANT_NameAndType              12
      CONSTANT_Utf8                     1
      CONSTANT_MethodHandle             15
      CONSTANT_MethodType               16
      CONSTANT_InvokeDynamic            18
      ~~~~

      8~9 字节，表示常量池长度，00 23 （35项） 表示常量池有 #1~#34项，注意 #0 项不计入，也没有值
      0000000 ca fe ba be 00 00 00 34 [00 23] 0a 00 06 00 15 09

      第#1项 0a 表示一个 Method 信息，00 06 和 00 15（21） 表示它引用了常量池中 #6 和 #21 项来获得 这个方法的【所属类】和【方法名】
      0000000 ca fe ba be 00 00 00 34 00 23 [0a 00 06 00 15] 09

      第#2项 09 表示一个 Field 信息，00 16（22）和 00 17（23） 表示它引用了常量池中 #22 和 # 23 项 来获得这个成员变量的【所属类】和【成员变量名】
      0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 [09
      0000020 00 16 00 17] 08 00 18 0a 00 19 00 1a 07 00 1b 07  

      第#3项 08 表示一个字符串常量名称，00 18（24）表示它引用了常量池中 #24 项
      0000020 00 16 00 17 [08 00 18 0a 00] 19 00 1a 07 00 1b 07

      第#4项 0a 表示一个 Method 信息，00 19（25） 和 00 1a（26） 表示它引用了常量池中 #25 和 #26 项来获得这个方法的【所属类】和【方法名】
      0000020 00 16 00 17 08 00 18 [0a 00 19 00 1a] 07 00 1b 07

      第#5项 07 表示一个 Class 信息，00 1b（27） 表示它引用了常量池中 #27 项
      0000020 00 16 00 17 08 00 18 0a 00 19 00 1a [07 00 1b] 07

      第#6项 07 表示一个 Class 信息，00 1c（28） 表示它引用了常量池中 #28 项
      0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b [07
      0000040 00 1c] 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29

      第#7项 01 表示一个 utf8 串，00 06 表示长度，3c 69 6e 69 74 3e 是【 <init> 】 表示构造函数
      0000040 00 1c [01 00 06 3c 69 6e 69 74 3e] 01 00 03 28 29  

      第#8项 01 表示一个 utf8 串，00 03 表示长度，28 29 56 是【()V】其实就是表示无参、无返回值
      0000040 00 1c 01 00 06 3c 69 6e 69 74 3e [01 00 03 28 29
      0000060 56] 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e

      第#9项 01 表示一个 utf8 串，00 04 表示长度，43 6f 64 65 是【Code】
      0000060 56 [01 00 04 43 6f 64 65] 01 00 0f 4c 69 6e 65 4e

      第#10项 01 表示一个 utf8 串，00 0f（15） 表示长度，4c 69 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65 是【LineNumberTable】
      0000060 56 01 00 04 43 6f 64 65 [01 00 0f 4c 69 6e 65 4e
      0000100 75 6d 62 65 72 54 61 62 6c 65] 01 00 12 4c 6f 63

      第#11项 01 表示一个 utf8 串，00 12（18） 表示长度，4c 6f 63 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65是【LocalVariableTable】
      0000100 75 6d 62 65 72 54 61 62 6c 65 [01 00 12 4c 6f 63
      0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65] 01

      第#12项 01 表示一个 utf8 串，00 04 表示长度，74 68 69 73 是【this】
      0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 [01
      0000140 00 04 74 68 69 73] 01 00 1d 4c 63 6e 2f 69 74 63

      第#13项 01 表示一个 utf8 串，00 1d（29） 表示长度，是【Lcn/itcast/jvm/t5/HelloWorld;】
      0000140 00 04 74 68 69 73 [01 00 1d 4c 63 6e 2f 69 74 63
      0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f
      0000200 57 6f 72 6c 64 3b] 01 00 04 6d 61 69 6e 01 00 16

      第#14项 01 表示一个 utf8 串，00 04 表示长度，74 68 69 73 是【main】
      0000200 57 6f 72 6c 64 3b [01 00 04 6d 61 69 6e] 01 00 16

      第#15项 01 表示一个 utf8 串，00 16（22） 表示长度，是【([Ljava/lang/String;)V】其实就是参数为 字符串数组，无返回值
      0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e [01 00 16
      0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72
      0000240 69 6e 67 3b 29 56] 01 00 04 61 72 67 73 01 00 13

      第#16项 01 表示一个 utf8 串，00 04 表示长度，是【args】
      0000240 69 6e 67 3b 29 56 [01 00 04 61 72 67 73] 01 00 13

      第#17项 01 表示一个 utf8 串，00 13（19） 表示长度，是【[Ljava/lang/String;】
      0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 [01 00 13
      0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69
      0000300 6e 67 3b] 01 00 10 4d 65 74 68 6f 64 50 61 72 61

      第#18项 01 表示一个 utf8 串，00 10（16） 表示长度，是【MethodParameters】
      0000300 6e 67 3b [01 00 10 4d 65 74 68 6f 64 50 61 72 61
      0000320 6d 65 74 65 72 73] 01 00 0a 53 6f 75 72 63 65 46

      第#19项 01 表示一个 utf8 串，00 0a（10） 表示长度，是【SourceFile】
      0000320 6d 65 74 65 72 73 [01 00 0a 53 6f 75 72 63 65 46
      0000340 69 6c 65] 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64  

      第#20项 01 表示一个 utf8 串，00 0f（15） 表示长度，是【HelloWorld.java】
      0000340 69 6c 65 [01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64
      0000360 2e 6a 61 76 61] 0c 00 07 00 08 07 00 1d 0c 00 1e

      第#21项 0c 表示一个 【名+类型】，00 07 00 08 引用了常量池中 #7 #8 两项
      0000360 2e 6a 61 76 61 [0c 00 07 00 08] 07 00 1d 0c 00 1e

      第#22项 07 表示一个 Class 信息，00 1d（29） 引用了常量池中 #29 项
      0000360 2e 6a 61 76 61 0c 00 [07 00 08 07 00 1d] 0c 00 1e

      第#23项 0c 表示一个 【名+类型】，00 1e（30） 00 1f （31）引用了常量池中 #30 #31 两项
      0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d [0c 00 1e
      0000400 00 1f] 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64

      第#24项 01 表示一个 utf8 串，00 0f（15） 表示长度，是【hello world】
      0000400 00 1f [01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64]

      第#25项 07 表示一个 Class 信息，00 20（32） 引用了常量池中 #32 项
      0000420 [07 00 20] 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74  

      第#26项 0c 表示一个 【名+类型】，00 21（33） 00 22（34）引用了常量池中 #33 #34 两项
      0000420 07 00 20 [0c 00 21 00 22] 01 00 1b 63 6e 2f 69 74  

      第#27项 01 表示一个 utf8 串，00 1b（27） 表示长度，是【cn/itcast/jvm/t5/HelloWorld】
      0000420 07 00 20 0c 00 21 00 22 [01 00 1b 63 6e 2f 69 74
      0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c
      0000460 6f 57 6f 72 6c 64] 01 00 10 6a 61 76 61 2f 6c 61  

      第#28项 01 表示一个 utf8 串，00 10（16） 表示长度，是【java/lang/Object】
      0000460 6f 57 6f 72 6c 64 [01 00 10 6a 61 76 61 2f 6c 61
      0000500 6e 67 2f 4f 62 6a 65 63 74] 01 00 10 6a 61 76 61

      第#29项 01 表示一个 utf8 串，00 10（16） 表示长度，是【java/lang/System】
      0000500 6e 67 2f 4f 62 6a 65 63 74 [01 00 10 6a 61 76 61
      0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d] 01 00 03 6f

      第#30项 01 表示一个 utf8 串，00 03 表示长度，是【out】
      0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d [01 00 03 6f
      0000540 75 74] 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72

      第#31项 01 表示一个 utf8 串，00 15（21） 表示长度，是【Ljava/io/PrintStream;】
      0000540 75 74 [01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72
      0000560 69 6e 74 53 74 72 65 61 6d 3b] 01 00 13 6a 61 76

      第#32项 01 表示一个 utf8 串，00 13（19） 表示长度，是【java/io/PrintStream】
      0000560 69 6e 74 53 74 72 65 61 6d 3b [01 00 13 6a 61 76
      0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d]

      第#33项 01 表示一个 utf8 串，00 07 表示长度，是【println】
      0000620 [01 00 07 70 72 69 6e 74 6c 6e] 01 00 15 28 4c 6a

      第#34项 01 表示一个 utf8 串，00 15（21） 表示长度，是【(Ljava/lang/String;)V】
      0000620 01 00 07 70 72 69 6e 74 6c 6e [01 00 15 28 4c 6a
      0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b
      0000660 29 56] 00 21 00 05 00 06 00 00 00 00 00 02 00 01

    1.4 访问标识与继承信息
      21 表示该 class 是一个类，公共的
      0000660 29 56 [00 21] 00 05 00 06 00 00 00 00 00 02 00 01
      05 表示根据常量池中 #5 找到本类全限定名
      0000660 29 56 00 21 [00 05] 00 06 00 00 00 00 00 02 00 01
      06 表示根据常量池中 #6 找到父类全限定名
      0000660 29 56 00 21 00 05 [00 06] 00 00 00 00 00 02 00 01
      表示接口的数量，本类为 0
      0000660 29 56 00 21 00 05 00 06 [00 00] 00 00 00 02 00 01
      ~~~~
      Flag Name                  Value        Interpretation
      ACC_PUBLIC                 0x0001       Declared public ; may be accessed from outside its package.
      ACC_FINAL                  0x0010       Declared final ; no subclasses allowed.
      ACC_SUPER                  0x0020       Treat superclass methods specially when invoked by the invokespecial instruction.
      ACC_INTERFACE              0x0200       Is an interface, not a class.
      ACC_ABSTRACT               0x0400       Declared abstract ; must not be instantiated.
      ACC_SYNTHETIC              0x1000       Declared synthetic; not present in the source code.
      ACC_ANNOTATION             0x2000       Declared as an annotation type.
      ACC_ENUM                   0x4000       Declared as an enum type.
      ~~~~

    1.5 Field 信息
      表示成员变量数量，本类为 0
      0000660 29 56 00 21 00 05 00 06 00 00 [00 00] 00 02 00 01
      FieldType        Type              Interpretation
      B                byte              signed byte
      C                char              Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16
      D                double            double-precision ﬂoating-point value
      F                float             single-precision ﬂoating-point value
      I                int               integer
      J                long              long integer
      L ClassName ;    reference         an instance of class ClassName
      S                short             signed short
      Z                boolean           true or false
      [                reference         one array dimension

    1.6 Method 信息
      表示方法数量，本类为 2
      0000660 29 56 00 21 00 05 00 06 00 00 00 00 [00 02] 00 01
      一个方法由 访问修饰符，名称，参数描述，方法属性数量，方法属性组成
        00 09 表示引用了常量池 #09 项，发现是【Code】属性
        00 00 00 2f 表示此属性的长度是 47
        00 01 表示【操作数栈】大深度 00 01 表示【局部变量表】大槽（slot）数
        00 00 00 05 表示字节码长度，本例是 5
        2a b7 00 01 b1 是字节码指令
        00 00 00 02 表示方法细节属性数量，本例是 2
        00 0a 表示引用了常量池 #10 项，发现是【LineNumberTable】属性
          00 00 00 06 表示此属性的总长度，本例是 6
          00 01 表示【LineNumberTable】长度
          00 00 表示【字节码】行号
          00 04 表示【java 源码】行号
        00 0b 表示引用了常量池 #11 项，发现是【LocalVariableTable】属性
          00 00 00 0c 表示此属性的总长度，本例是 12
          00 01 表示【LocalVariableTable】长度
          00 00 表示局部变量生命周期开始，相对于字节码的偏移量
          00 05 表示局部变量覆盖的范围长度
          00 0c 表示局部变量名称，本例引用了常量池 #12 项，是【this】
          00 0d 表示局部变量的类型，本例引用了常量池 #13 项，是 【Lcn/itcast/jvm/t5/HelloWorld;】
          00 00 表示局部变量占有的槽位（slot）编号，本例是 0
        ~~~~
        0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 [00 01
        0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01
        0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00
        0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00
        0000760 01 00 00 00 05 00 0c 00 0d 00 00] 00 09 00 0e 00
        ~~~~
    1.7 附加属性
      00 01 表示附加属性数量
      00 13 表示引用了常量池 #19 项，即【SourceFile】
      00 00 00 02 表示此属性的长度
      00 14 表示引用了常量池 #20 项，即【HelloWorld.java】
      0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00
      0001120 00 00 02 00 14

      参考文献 https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html

2、字节码指令
    2.1 入门(0x2a)
      接着上一节，研究一下两组字节码指令，一个是
        2a b7 00 01 b1
      public cn.itcast.jvm.t5.HelloWorld(); 构造方法的字节码指令
        1. 2a => aload_0 加载 slot 0 的局部变量，即 this，做为下面的 invokespecial 构造方法调用的参数
        2. b7 => invokespecial 预备调用构造方法，哪个方法呢？
        3. 00 01 引用常量池中 #1 项，即【 Method java/lang/Object."<init>":()V 】
        4. b1 表示返回
      另一个是 public static void main(java.lang.String[]); 主方法的字节码指令
        1. b2 => getstatic 用来加载静态变量，哪个静态变量呢？
        2. 00 02 引用常量池中 #2 项，即【Field java/lang/System.out:Ljava/io/PrintStream;】
        3. 12 => ldc 加载参数，哪个参数呢？
        4. 03 引用常量池中 #3 项，即 【String hello world】
        5. b6 => invokevirtual 预备调用成员方法，哪个方法呢？
        6. 00 04 引用常量池中 #4 项，即【Method java/io/PrintStream.println:(Ljava/lang/String;)V】
        7. b1 表示返回
      请参考 https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5
    2.2 javap 工具
       自己分析类文件结构太麻烦了，Oracle 提供了 javap 工具来反编译 class 文件   javap -v HelloWorld.class
    2.3方法执行流程
      1）原始 java 代码
      2）编译后的字节码文件
      3）常量池载入运行时常量池（常量超过short放入常量池）
      4）方法字节码载入方法区
      5）main 线程开始运行，分配栈帧内存
      6）执行引擎（main方法）开始执行字节码（用字节码指令）（部分）在栈帧中进行分为局部变量表和操作数栈
        bipush 10
          将一个 byte 压入操作数栈（其长度会补齐 4 个字节），类似的指令还有
          sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）
          ldc 将一个 int 压入操作数栈
          ldc2_w 将一个 long 压入操作数栈（分两次压入，因为 long 是 8 个字节）
          这里小的数字都是和字节码指令存在一起，超过 short 范围的数字存入了常量池
        istore_1
          将操作数栈顶数据弹出，存入局部变量表的 slot 1
        ldc #3
          从常量池加载 #3 数据到操作数栈
          注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的
        invokevirtual #5
          找到常量池 #5 项 定位到方法区 java/io/PrintStream.println:(I)V 方法
          生成新的栈帧（分配 locals、stack等）
          传递参数，执行新栈帧中的字节码
          执行完毕，弹出栈帧
          清除 main 操作数栈内容
        return
          完成 main 方法调用，弹出 main 栈帧
          程序结束
    2.4 练习 - 分析 i++
       注意 iinc 指令是直接在局部变量 slot 上进行运算
       a++(先iload) 和 ++a(iinc) 的区别是先执行 iload 还是 先执行 iinc
    2.5 条件判断指令
       0x99 ifeq 判断是否 == 0
       0x9a ifne 判断是否 != 0
       0x9b iﬂt 判断是否 < 0
       0x9c ifge 判断是否 >= 0
       0x9d ifgt 判断是否 > 0
       0x9e iﬂe 判断是否 <= 0
       0x9f if_icmpeq 两个int是否 ==
       0xa0 if_icmpne 两个int是否 !=
       0xa1 if_icmplt 两个int是否 <
       0xa2 if_icmpge 两个int是否 >=
       0xa3 if_icmpgt 两个int是否 >
       0xa4 if_icmple 两个int是否 <=
       0xa5 if_acmpeq 两个引用是否 ==
       0xa6 if_acmpne 两个引用是否 !=
       0xc6 ifnull 判断是否 == null
       0xc7 ifnonnull 判断是否 != null
       几点说明：
        byte，short，char 都会按 int 比较，因为操作数栈都是 4 字节
        goto 用来进行跳转到指定行号的字节码
    2.6 循环控制指令
      其实循环控制还是前面介绍的那些指令
      注意 比较 while 和 for 的字节码，你发现它们是一模一样的，殊途也能同归
    2.7 练习 - 判断结果
    ~~~~
    public class Demo3_6_1 {
       public static void main(String[] args) {  
          int i = 0;      
          int x = 0;      
          while (i < 10) {    
               x = x++;    
               i++;      
          }      
          System.out.println(x); // 结果是 0  
          } }
    ~~~~
    2.8 构造方法
      1) <cinit>()V
        编译器会按从上至下的顺序，收集所有 static 静态代码块和静态成员赋值的代码，合并为一个特殊的方法 <cinit>()V ：
        <cinit>()V 方法会在类加载的初始化阶段被调用
      2）<init>()V
        编译器会按从上至下的顺序，收集所有 {} 代码块和成员变量赋值的代码，形成新的构造方法，但原始构造方法内的代码总是在后
    2.9 方法调用
      看一下几种不同的方法调用对应的字节码指令
        new 是创建【对象】，给对象分配堆内存，执行成功会将【对象引用】压入操作数栈
        dup 是赋值操作数栈栈顶的内容，本例即为【对象引用】，为什么需要两份引用呢，
          一个是要配 合 invokespecial 调用该对象的构造方法 "<init>":()V （会消耗掉栈顶一个引用），
          另一个要 配合 astore_1 赋值给局部变量
        最终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静 态绑定
        普通成员方法是由 invokevirtual 调用，属于动态绑定，即支持多态
        成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】
        通过【对象引用】调用一个静态方法，可以看到在调用 invokestatic 之前执行了 pop 指令，把【对象引用】从操作数栈弹掉了
        还有一个执行 invokespecial 的情况是通过 super 调用父类方法
    2.10 多态的原理
      当执行 invokevirtual 指令时，
        1. 先通过栈帧中的对象引用找到对象
        2. 分析对象头，找到对象的实际 Class
        3. Class 结构中有 vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了
        4. 查表得到方法的具体地址
        5. 执行方法的字节码

      工具：HSDB工具
        进入 JDK 安装目录，执行命令  java -cp ./lib/sa-jdi.jar sun.jvm.hotspot.HSDB
        进入图形界面 attach 进程 id
        打开 Tools -> Find Object By Query 输入语句    select 实例 from 类的详细位置 实例 点击 Execute 执行
        点击超链接可以看到对象的内存结构，此对象没有任何属性，因此只有对象头的 16 字节，前 8 字节是 MarkWord，对象的hash信息，后 8 字节就是对象的 Class 指针（类型指针）
        查看类的 vtable(虚方法表)  方法：Alt+R 进入 Inspector 工具，输入刚才的 Class 内存地址  或者 Tools -> Class Browser 输入 Dog 查找，可以得到相同的结果

      2.11 异常处理
        try-catch
          ~~~~局部异常表
           Exception table:        
           from    to  target type  
            2     5     8   Class java/lang/Exception
          ~~~~
          可以看到多出来一个 Exception table 的结构，[from, to) 是前闭后开的检测范围，一旦这个范围 内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号
          8 行的字节码指令 astore_2 是将异常对象引用存入局部变量表的 slot(槽位) 2 位置
        多个 single-catch 块的情况
          ~~~~
           Exception table:        
           from    to  target type            
            2     5     8   Class java/lang/ArithmeticException            
            2     5    15   Class java/lang/NullPointerException            
            2     5    22   Class java/lang/Exception
          ~~~~
          因为异常出现时，只能进入 Exception table 中一个分支，所以局部变量表 slot 2 位置被共用
        ﬁnally
          可以看到 ﬁnally 中的代码被复制了 3 份，分别放入 try 流程，catch 流程以及 catch 剩余的异常类型流程
      2.12 练习 - ﬁnally 面试题 -------ﬁnally 出现了 return
        ~~~~//源码
        public class Demo3_12_2 {  
         public static void main(String[] args) {    
            int result = test();      
            System.out.println(result);  
          }
          public static int test() {        
            try {            
            return 10;      
            } finally {            
            return 20;    
             }  
            }
          }
        ~~~~
        ~~~~//字节码
        stack=1, locals=2, args_size=0        
        0: bipush        10    // <- 10 放入栈顶
        5: ireturn             // 返回栈顶 int(20)        
        6: astore_1            // catch any -> slot 1        
        7: bipush        20    // <- 20 放入栈顶        
        9: ireturn             // 返回栈顶 int(20)      
        Exception table:        
         from    to  target type          
           0     3     6   any
        ~~~~
         由于 ﬁnally 中的 ireturn 被插入了所有可能的流程，因此返回结果肯定以 ﬁnally 的为准
         至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子
         跟上例中的 ﬁnally 相比，发现没有 athrow 了，这告诉我们：如果在 ﬁnally 中出现了 return，会 吞掉异常

         面试题二： ﬁnally 对返回值影响
         ~~~~
           public class Demo3_12_2 {    
           public static void main(String[] args) {        
           int result = test();        
           System.out.println(result);  
           }
           public static int test() {        
           int i = 10;        
           try {            
           return i;      
           } finally {            
           i = 20;      
           }  
           } }
         ~~~~
         字节码文件
         ~~~~
          Code:      
         stack=1, locals=3, args_size=0        
         0: bipush        10    // <- 10 放入栈顶        
         2: istore_0            // 10 -> i        
         3: iload_0             // <- i(10)        
         4: istore_1            // 10 -> slot 1，暂存至 slot 1，目的是为了固定返回值        
         5: bipush        20    // <- 20 放入栈顶        
         7: istore_0            // 20 -> i        
         8: iload_1             // <- slot 1(10) 载入 slot 1 暂存的值        
         9: ireturn             // 返回栈顶的 int(10)        
         10: astore_2        
         11: bipush        20        
         13: istore_0        
         14: aload_2        
         15: athrow      
         Exception table:    
             from    to  target type      
              3     5    10   any
         ~~~~
    2.13 synchronized
      ~~~~
      public class Demo3_13 {
      public static void main(String[] args) {        
      Object lock = new Object();      
      synchronized (lock) {            
      System.out.println("ok");      
      }    }     }
      ~~~~
      字节码文件
      ~~~~
       stack=2, locals=4, args_size=1        
      0: new           #2        // new Object        
      3: dup                     //复制对象的引用
      4: invokespecial #1        // invokespecial <init>:()V        
      7: astore_1                // lock引用 -> lock        
      8: aload_1                 // <- lock （synchronized开始）        
      9: dup        
      10: astore_2                // lock引用 -> slot 2        
      11: monitorenter            // monitorenter(lock引用) （加锁）       
      12: getstatic     #3        // <- System.out        
      15: ldc           #4        // <- "ok"
      17: invokevirtual #5        // invokevirtual println: (Ljava/lang/String;)V        
      20: aload_2                 // <- slot 2(lock引用)        
      21: monitorexit             // monitorexit(lock引用)    （解锁）    
      22: goto          30        
      25: astore_3                // any -> slot 3        
      26: aload_2                 // <- slot 2(lock引用)        
      27: monitorexit             // monitorexit(lock引用)        
      28: aload_3        29: athrow        
      30: return      Exception table:        
       from    to  target type
         12    22    25   any          
         25    28    25   any             
      ~~~~
      注意：
         方法级别的 synchronized 不会在字节码指令中有所体现
3. 编译期处理
    所谓的 语法糖 ，其实就是指 java 编译器把 *.java 源码编译为 *.class 字节码的过程中，自动生成 和转换的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利（给糖吃 嘛）
    注意，以下代码的分析，借助了 javap 工具，idea 的反编译功能，idea 插件 jclasslib 等工具。另外， 编译器转换的结果直接就是 class 字节码，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，并 不是编译器还会转换出中间的 java 源码，切记。
    3.1 默认构造
    3.2 自动拆装箱
      ~~~~
      public class Candy2 {
         public static void main(String[] args) {      
         Integer x = 1;      
         int y = x;  
          } }
      ~~~~
      这段代码在 JDK 5 之前是无法编译通过的，必须改写为 代码片段2 :
      ~~~~
      public class Candy2 {
             public static void main(String[] args) {      
             Integer x = Integer.valueOf(1);  
             int y = x.intValue();    }
      ~~~~
      显然之前版本的代码太麻烦了，需要在基本类型和包装类型之间来回转换（尤其是集合类中操作的都是 包装类型），因此这些转换的事情在JDK 5 以后都由编译器在编译阶段完成。
      即 代码片段1 都会在编 译阶段被转换为 代码片段2

      3.3 泛型集合取值
        泛型也是在 JDK 5 开始加入的特性，但 java 在编译泛型代码后会执行 泛型擦除 的动作，即泛型信息 在编译为字节码之后就丢失了，实际的类型都当做了 Object 类型来处理：
        ~~~~
        public class Candy3 {  
          public static void main(String[] args) {    
          List<Integer> list = new ArrayList<>();        
          list.add(10); // 实际调用的是 List.add(Object e)        
          Integer x = list.get(0); // 实际调用的是 Object obj = List.get(int index);  
           } }
        ~~~~
        也就是取值的时候必须在重新进行类型的转换，就是在字节码文件当中都会当作Object
        擦除的是字节码上的泛型信息，但可以看到 LocalVariableTypeTable 仍然保留了方法参数泛型的信息
        可以通过反射进行获取
        ~~~~
        public Set<Integer> test(List<String> list, Map<Integer, Object> map) { }
        ~~~~
        根据反射获取参数的泛型信息 但只能获取到方法上的
        ~~~~
        Method test = Candy3.class.getMethod("test", List.class, Map.class);
        Type[] types = test.getGenericParameterTypes();
        for (Type type : types) {    
        if (type instanceof ParameterizedType) {        
        ParameterizedType parameterizedType = (ParameterizedType) type;        
        System.out.println("原始类型 - " + parameterizedType.getRawType());        
        Type[] arguments = parameterizedType.getActualTypeArguments();        
        for (int i = 0; i < arguments.length; i++) {            
        System.out.printf("泛型参数[%d] - %s\n", i, arguments[i]);      
        }    }
        ~~~~
        输出结果
        ~~~~
        原始类型 - interface java.util.List
        泛型参数[0] - class java.lang.String
        原始类型 - interface java.util.Map
        泛型参数[0] - class java.lang.Integer
        泛型参数[1] - class java.lang.Object
        ~~~~
    3.4 可变参数
      可变参数也是 JDK 5 开始加入的新特性： 例如：
      ~~~~
      public class Candy4 {    
      public static void foo(String... args) {        
      String[] array = args; // 直接赋值        
      System.out.println(array);  
      }    
      public static void main(String[] args) {        
      foo("hello", "world");  
      } }
      ~~~~
      可变参数 String... args 其实是一个 String[] args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：
      ~~~~
      public class Candy4 {    
      public static void foo(String[] args) {        
      String[] array = args; // 直接赋值        
      System.out.println(array);  
      }    
      public static void main(String[] args) {        
      foo(new String[]{"hello", "world"});  
      } }
      ~~~~
      注意：
         如果调用了 foo() 则等价代码为 foo(new String[]{}) ，创建了一个空的数组，而不会 传递 null 进去
    3.5 foreach 循环
      ~~~~
       for (int e : array) {          
       System.out.println(e);    
         }
      ~~~~
      转换为：
      ~~~~
       for(int i = 0; i < array.length; ++i) {          
       int e = array[i];        
         System.out.println(e);      
        }
      ~~~~
      而集合的循环：
      ~~~~
         List<Integer> list = Arrays.asList(1,2,3,4,5);      
        for (Integer i : list) {      
            System.out.println(i);    
           }
      ~~~~
      实际上是
      ~~~~
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);        
       Iterator iter = list.iterator();        
       while(iter.hasNext()) {            
       Integer e = (Integer)iter.next();            
       System.out.println(e);      
        }    }
      ~~~~
        注意：foreach 循环写法，能够配合数组，以及所有实现了 Iterable 接口的集合类一起使用，其 中 Iterable 用来获取集合的迭代器（ Iterator ）
    3.6 switch 字符串
        从 JDK 7 开始，switch 可以作用于字符串和枚举类，这个功能其实也是语法糖。
          可以看到，执行了两遍 switch，第一遍是根据字符串的 hashCode 和 equals 将字符串的转换为相应 byte 类型，第二遍才是利用 byte 执行进行比较。
          为什么第一遍时必须既比较 hashCode，又利用 equals 比较呢？hashCode 是为了提高效率，减少可 能的比较；而 equals 是为了防止 hashCode 冲突，
    3.7 switch 枚举
      switch 枚举的例子，原始代码：
      ~~~~
      enum Sex {    MALE, FEMALE }

      public class Candy7 {    
      public static void foo(Sex sex) {      
       switch (sex) {            
      case MALE:                System.out.println("男"); break;          
      case FEMALE:                System.out.println("女"); break;      
      }    } }
      ~~~~
      转换后的代码
      ~~~~
      public class Candy7 {    /**     
       * 定义一个合成类（仅 jvm 使用，对我们不可见）    
       * 用来映射枚举的 ordinal 与数组元素的关系    
       * 枚举的 ordinal 表示枚举对象的序号，从 0 开始    
       * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1    
       */        
       static class $MAP {        // 数组大小即为枚举元素个数，里面存储case用来对比的数字      
        static int[] map = new int[2];        
       static {            
       map[Sex.MALE.ordinal()] = 1;          
        map[Sex.FEMALE.ordinal()] = 2;      
        }  
        }
        public static void foo(Sex sex) {        
        int x = $MAP.map[sex.ordinal()];        
        switch (x) {            
        case 1:   System.out.println("男");  break;            
        case 2:   System.out.println("女");  break;      
        }    } }
      ~~~~
      3.8 枚举类
        JDK 7 新增了枚举类，以前面的性别枚举为例：
        转换后为
        ~~~~
        public final class Sex extends Enum<Sex> {    
        public static final Sex MALE;    
        public static final Sex FEMALE;    
        private static final Sex[] $VALUES;
        static {        
        MALE = new Sex("MALE", 0);        
        FEMALE = new Sex("FEMALE", 1);        
        $VALUES = new Sex[]{MALE, FEMALE};    }
        private Sex(String name, int ordinal) {        super(name, ordinal);    }
        public static Sex[] values() {        return $VALUES.clone();    }
        public static Sex valueOf(String name) {        return Enum.valueOf(Sex.class, name);    }
        ~~~~
      3.9 try-with-resources
        JDK 7 开始新增了对需要关闭的资源处理的特殊语法 try-with-resources
        其中资源对象需要实现 AutoCloseable 接口，例如 InputStream 、 OutputStream 、 Connection 、 Statement 、 ResultSet 等接口都实现了 AutoCloseable ，使用 try-withresources 可以不用写 finally 语句块，编译器会帮助生成关闭资源代码，例如：
        ~~~~
        public class Candy9 {
            public static void main(String[] args) {
                 try(InputStream is = new FileInputStream("d:\\1.txt")) {
                      System.out.println(is);
                   } catch (IOException e) {
                       e.printStackTrace();
                    }    } }
        ~~~~
        转换为
        ~~~~
        public class Candy9 {    
        public Candy9() {    }
        public static void main(String[] args) {        
        try {            
        InputStream is = new FileInputStream("d:\\1.txt");
        hrowable t = null;  
         try {                
        System.out.println(is);          
        } catch (Throwable e1) {                
        // t 是我们代码出现的异常                
        t = e1;                
        throw e1;          
        } finally {                
        // 判断了资源不为空                
        if (is != null) {                    
        // 如果我们代码有异常                    
        if (t != null) {                      
         try {                            
        is.close();                      
        } catch (Throwable e2) {                          
         // 如果 close 出现异常，作为被压制异常添加                          
         t.addSuppressed(e2);                      
         }                  
          } else {                        
          // 如果我们代码没有异常，close 出现的异常就是后 catch 块中的 e                       
           is.close();                  
           }              
           }          
           }      
           } catch (IOException e) {             
           e.printStackTrace();      
           }    } }
        ~~~~
        为什么要设计一个 addSuppressed(Throwable e) （添加被压制异常）的方法呢？
        是为了防止异常信 息的丢失（想想 try-with-resources 生成的 ﬁanlly 中如果抛出了异常）：
      3.10 方法重写时的桥接方法
        我们都知道，方法重写时对返回值分两种情况：
         父子类的返回值完全一致
         子类返回值可以是父类返回值的子类
         例如 ：
         ~~~~
         class A {    public Number m() {        return 1;    } }
         class B extends A {    @Override  
          // 子类 m 方法的返回值是 Integer 是父类 m 方法返回值 Number 的子类   
          public Integer m() {        return 2;    } }
         ~~~~
         java编译器编译后
         ~~~~class B extends A {    public Integer m() {        return 2;    }  
          // 此方法才是真正重写了父类 public Number m() 方法  
          public synthetic bridge Number m() {    
             // 调用 public Integer m()      
            return m();    } }
         ~~~~
         其中桥接方法比较特殊，仅对 java 虚拟机可见，并且与原来的 public Integer m() 没有命名冲突
      3.11 匿名内部类
        注意 这同时解释了为什么匿名内部类引用局部变量时，局部变量必须是 ﬁnal 的：因为在创建 Candy11$1 对象时，将 x 的值赋值给了 Candy11$1 对象的 val 属性， 不应该再发生变了，如果变，那么 x 属性没有机会再跟着一起变化
4. 类加载阶段
     4.1 加载
        将类的字节码载入方法区中，内部采用 C++ 的 instanceKlass（数据结构） 描述 java 类，它的重要 ﬁeld 有：
        _java_mirror 即 java 的类镜像，例如对 String 来说，就是 String.class，作用是把 klass 暴 露给 java 使用
        _super 即父类
        _ﬁelds 即成员变量
        _methods 即方法
        _constants 即常量池
        _class_loader 即类加载器
        _vtable 虚方法表
        _itable 接口方法表
        如果这个类还有父类没有加载，先加载父类 加载和链接可能是交替运行的
        注意
        instanceKlass 这样的【元数据】是存储在方法区（1.8 后的元空间内），但 _java_mirror 是存储在堆中
        可以通过前面介绍的 HSDB 工具查看
     4.2 链接
       验证
         验证类是否符合 JVM规范，安全性检查 用 UE 等支持二进制的编辑器修改 HelloWorld.class 的魔数，在控制台运行
      准备
        为 static 变量分配空间，设置默认值
        static 变量在 JDK 7 之前存储于 instanceKlass 末尾，从 JDK 7 开始，存储于 _java_mirror 末尾
        static 变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成
        如果 static 变量是 ﬁnal 的基本类型，以及字符串常量，那么编译阶段值就确定了，赋值在准备阶 段完成
        如果 static 变量是 ﬁnal 的，但属于引用类型，那么赋值也会在初始化阶段完成
     解析
       将常量池中的符号引用解析为直接引用
   4.3 初始化
     <cinit>()V 方法
       初始化即调用 <cinit>()V ，虚拟机会保证这个类的『构造方法』的线程安全
    发生的时机
      概括得说，类初始化是【懒惰的】
        main 方法所在的类，总会被首先初始化
        首次访问这个类的静态变量或静态方法时
        子类初始化，如果父类还没初始化，会引发
        子类访问父类的静态变量，只会触发父类的初始化
        Class.forName
        new 会导致初始化
    不会导致类初始化的情况
      访问类的 static ﬁnal 静态常量（基本类型和字符串）不会触发初始化
      类对象.class 不会触发初始化
      创建该类的数组不会触发初始化
      类加载器的 loadClass 方法 Class.forName 的参数 2 为 false 时
5. 类加载器
  以 JDK 8 为例：
        名称               加载哪的类                         说明
      Bootstrap          ClassLoader JAVA_HOME/jre/lib       无法直接访问
      Extension          ClassLoader JAVA_HOME/jre/lib/ext   上级为 Bootstrap，显示为 null
      Application        ClassLoader classpath               上级为 Extension
      自定义类加载器            自定义                         上级为 Application
  5.1 启动类加载器
      用 Bootstrap 类加载器加载类：
      -Xbootclasspath 表示设置 bootclasspath
      其中 /a:. 表示将当前目录追加至 bootclasspath 之后
        可以用这个办法替换核心类
        java -Xbootclasspath:<new bootclasspath>
        java -Xbootclasspath/a:<追加路径>
        java -Xbootclasspath/p:<追加路径>
  5.2 扩展类加载器
     将 jar 包拷贝到 JAVA_HOME/jre/lib/ext
  5.3 双亲委派模式
    所谓的双亲委派，就是指调用类加载器的 loadClass 方法时，查找类的规则 委派上级优先进行加载
    注意
      这里的双亲，翻译为上级似乎更为合适，因为它们并没有继承关系
  5.4 线程上下文类加载器
    大名鼎鼎的 Service Provider Interface （SPI）
      约定如下，在 jar 包的 META-INF/services 包下，以接口全限定名名为文件，文件内容是实现类名称
      即可以这样实现了
      ~~~~
      ServiceLoader<接口类型> allImpls = ServiceLoader.load(接口类型.class);
      Iterator<接口类型> iter = allImpls.iterator();
      while(iter.hasNext())
      {    
      iter.next(); }
      ~~~~
      来得到实现类，体现的是【面向接口编程+解耦】的思想，在下面一些框架中都运用了此思想：
      JDBC
      Servlet 初始化器
      Spring 容器
      Dubbo（对 SPI 进行了扩展）
      接着看 ServiceLoader.load 方法：
      ~~~~
      public static <S> ServiceLoader<S> load(Class<S> service) {    
      // 获取线程上下文类加载器    
      ClassLoader cl = Thread.currentThread().getContextClassLoader();    
      return ServiceLoader.load(service, cl); }
      ~~~~

      线程上下文类加载器是当前线程使用的类加载器，默认就是应用程序类加载器，它内部又是由 Class.forName 调用了线程上下文类加载器完成类加载，具体代码在 ServiceLoader 的内部类 LazyIterator 中：
   5.5 自定义类加载器
      问问自己，什么时候需要自定义类加载器
       1）想加载非 classpath 随意路径中的类文件
       2）都是通过接口来使用实现，希望解耦时，常用在框架设计
       3）这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器
     步骤：
      1. 继承 ClassLoader 父类
      2. 要遵从双亲委派机制，重写 ﬁndClass 方法（参数就是之后要加载的类文件） 注意不是重写 loadClass 方法，否则不会走双亲委派机制
      3. 读取类文件的字节码
      4. 调用父类的 deﬁneClass 方法来加载类
      5. 使用者调用该类加载器的 loadClass 方法

      ~~~~
        public class Load7 {
        public static void main(String[] args) throws Exception {
        MyClassLoader classLoader = new MyClassLoader();
        Class<?> c1 = classLoader.loadClass("MapImpl1");
        Class<?> c2 = classLoader.loadClass("MapImpl1");
        System.out.println(c1 == c2);//true

        MyClassLoader classLoader2 = new MyClassLoader();
        Class<?> c3 = classLoader2.loadClass("MapImpl1");
        System.out.println(c1 == c3);//false
        c1.newInstance();
        }
        }
        class MyClassLoader extends ClassLoader {
        @Override // name 就是类名称
        protected Class<?> findClass(String name) throws ClassNotFoundException {
        String path = "e:\\myclasspath\\" + name + ".class";
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            Files.copy(Paths.get(path), os);

            // 得到字节数组
            byte[] bytes = os.toByteArray();

            // byte[] -> *.class
            return defineClass(name, bytes, 0, bytes.length);

         } catch (IOException e) {
            e.printStackTrace();
            throw new ClassNotFoundException("类文件未找到", e);
        }
        }
       }
      ~~~~

6. 运行期优化
    6.1 即时编译
       分层编译 （TieredCompilation）
       在一段时间之后就会变得快速起来
       原因是什么呢？
       JVM 将执行状态分成了 5 个层次：
         0 层，解释执行（Interpreter）
         1 层，使用 C1 即时编译器编译执行（不带 proﬁling）
         2 层，使用 C1 即时编译器编译执行（带基本的 proﬁling）
         3 层，使用 C1 即时编译器编译执行（带完全的 proﬁling）
         4 层，使用 C2 即时编译器编译执行 proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等
       即时编译器（JIT）与解释器的区别
         解释器是将字节码解释为机器码，下次即使遇到相同的字节码，仍会执行重复的解释 JIT 是将一些字节码编译为机器码，并存入 Code Cache，下次遇到相同的代码，直接执行，无需 再编译 解释器是将字节码解释为针对所有平台都通用的机器码 JIT 会根据平台类型，生成平台特定的机器码
         对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运 行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速 度。 执行效率上简单比较一下 Interpreter < C1 < C2，总的目标是发现热点代码（hotspot名称的由 来），优化之
         刚才的一种优化手段称之为【逃逸分析】，发现新建的对象是否逃逸。可以使用 -XX:DoEscapeAnalysis 关闭逃逸分析，再运行刚才的示例观察结果
       参考资料：https://docs.oracle.com/en/java/javase/12/vm/java-hotspot-virtual-machineperformance-enhancements.html#GUID-D2E3DC58-D18B-4A6C-8167-4A1DFB4888E4
       方法内联 （Inlining）
         如果发现方法是热点方法，并且长度不太长时，会进行内联，所谓的内联就是把方法内代码拷贝、 粘贴到调用者的位置：
         还能够进行常量折叠（constant folding）的优化
         JVM参数
           -XX:+UnlockDiagnosticVMOptions
           -XX:+PrintInlining （解锁隐藏参数）打印 inlining 信息    
           -XX:CompileCommand=dontinline,*JIT2.square  禁止某个方法 inlining    
           -XX:+PrintCompilation 打印编译信息
      字段优化
        JMH 基准测试请参考：http://openjdk.java.net/projects/code-tools/jmh/
        尽量使用局部变量
    6.2 反射优化
       invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl（本地方法访问器） 实现
       当调用到第 16 次（从0开始算）时，会采用运行时生成的类代替掉初的实现，可以通过 debug 得到 类名为 sun.reﬂect.GeneratedMethodAccessor1
       可以使用阿里的 arthas 工具
       注意
        通过查看 ReflectionFactory 源码可知
          sun.reﬂect.noInﬂation 可以用来禁用膨胀（直接生成 GeneratedMethodAccessor1，但首 次生成比较耗时，如果仅反射调用一次，不划算）
          sun.reﬂect.inﬂationThreshold 可以修改膨胀阈值
