一、程序计数器
   作用：记住下一条JVM指令的执行地址
   物理实现：寄存器
   特点：1、线程私有，每一个线程拥有自己的程序计数器
         2、唯一一个不会存在内存溢出的寄存器

二、Java虚拟机栈
   作用：线程运行需要的内存空间，由栈帧组成，栈帧就是方法运行需要的内存空间，对应着每次方法调用时的内存
   栈帧：用于存储局部变量表、操作数栈、动态链接、方法出口等信息
   每次线程都只能有一个活动栈帧，对应着当前正在执行的那个方法。
   注意：1、垃圾回收不涉及垃圾回收
        2、栈内存分配越大那么线程数越少
        3、方法内的局部变量是线程安全的，且其的作用范围只能是方法内部，否则就是线程不安全的。
        4、可以通过-Xss256k进行设置栈上午内存大小。
   栈内存溢出(StackOverFlowError)：1、栈帧过多，递归调用容易出现该种情况；2、栈帧过大，导致栈溢出。
   线程运行诊断：1、cpu占用过多： 1)top命令定位进程对cop占用；2)ps H -eo pid,tid,%cpu | grep 进程id 进行线程定位； 3）jstack 进程id 查看详细信息
                2、程序运行很长时间没有结果：jstack进行调优
   本地方法：native
三：堆Heap
   通过new关键字，创建对象都会使用堆内存，用于存储对象实例。
   特点：
       1、它是线程共享的，堆中对象都需要考虑线程安全的问题
       2、它有了；垃圾回收机制
   堆内存溢出：OutOfMemoryError
      产生原因：不断创建对象，并使GC回收机制不能清除这些对象，之后就会产生异常。
      虚拟机控制：-Xmx进行设置，
   堆内存诊断：
   jps工具：查看当前系统中有哪些Java进程
   jmap工具：查看对内存占用情况 jmap -heap 进程id
   jconsole工具：图形界面的，多功能监测工具，可以连续监测
   案例：垃圾回收后，内存依旧占用很高  jps查看进程id；jmap -heap 进程id 查看内存详情；jconsole可视化进行查看；jvisualvm 可视化查看(特点：抓取堆的当前快照)
四、方法区
   定义：所有java虚拟机线程共享的内存区域，存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
   溢出：-XX:MaxPermSize=8m
        1.8之前，永久代内存溢出：java.lang.OutOfMemoryError:PermGen space
        1.8之后：元空间内存溢出：java.lang.OutOfMemoryError:Metaspace
五、运行时常量池
   二进制字节码文件（类的基本信息、常量池、类的方法定义，包含虚拟机指令）
   javac 程序.java  生成java文件
   javap -c 程序.class 反编译字节码文件，查看类的基本信息
   常量池：就是一张表，虚拟机指令根据这张表找到要执行的类名、方法名、参数类型、字面量值等信息、
   运行时常量池，常量池是*.class文件中的，当该类被加载，他的常量池信息就会放入运行时常量池，并吧里面的符号地址变为真实地址
   StringTable 串池特性
   常量池中的字符串只是符号，第一次用到时才会变成对象
   利用串池的机制，来避免重复创建字符串对象
   字符串变量拼接的原理是StringBuilder()
   字符串常量拼接的原理是编译期间优化
   可以使用intern方法，主动将串池中还没有的字符串对象放入串池 （1.8）讲这个字符串对象尝试放入串池，如果有并不会放入，如果没有则放入串池，会把串池中的对象返回
                                                         （1.6）讲这个字符串对象尝试放入串池，如果有并不会放入，如果没有则复制这个对象，并放入放入串池，因此是两个对象。
   StringTable位置 （1.8）在堆中设置大小-Xmx10m -XX : -UserGCOverHeadLimit；（1.6）在永久代中设置大小： -XX : MaxPermSize-10m
   StringTable垃圾回收 -Xmx10m -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc
   StringTable性能调优 1)调整桶的个数 -XX:StringTableSize=20000  2）考虑将字符串对象是否入池 intern()方法
六、直接内存 Direct Memory
   常见于NIO操作时，由于数据缓冲区
   分配回收成本高，但读写性能高
   不受JVM内存回收管理
   在JDK1.4新加入了NIO类，引入了基于通道与缓冲区的I/O方式，直接使用Native函数库直接分配堆外内存，之后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。避免了在Java堆和Native堆中来回复制数据。
   直接内存溢出：
   释放原理：UnSafe对象的allocateMemory()和setMemory()进行分配内存  freeMemory()进行释放
   ByteBuffer的实现类内部使用了Cleaner(虚引用)来检测ByteBuffer对象，一旦ByteBuffer对象被垃圾回收，那么就会使用ReferenceHandler线程的clean方法调用freeMemory来释放直接内存
   -XX：+DisableExplicitGC 禁用显示的垃圾回收，使System.gc()无效，同时也影响直接内存的回收，所以直接内存释放用UnSafe对象进行管理
